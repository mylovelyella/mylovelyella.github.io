<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go笔记 on Peacher`s Blog</title>
    <link>https://mylovelyella.github.io/tags/go%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in go笔记 on Peacher`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Dec 2020 18:04:27 +0800</lastBuildDate><atom:link href="https://mylovelyella.github.io/tags/go%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go并发：聊天服务器</title>
      <link>https://mylovelyella.github.io/2020/chat/</link>
      <pubDate>Wed, 16 Dec 2020 18:04:27 +0800</pubDate>
      
      <guid>https://mylovelyella.github.io/2020/chat/</guid>
      <description>Go语言聊天服务器 服务端 服务端程序中包含 4 个 goroutine，分别是一个主 goroutine 和广播（broadcaster）goroutine，每一个连接</description>
    </item>
    
    <item>
      <title>Go并发：合理退出并发协程</title>
      <link>https://mylovelyella.github.io/2020/parallel-exit/</link>
      <pubDate>Wed, 16 Dec 2020 17:25:14 +0800</pubDate>
      
      <guid>https://mylovelyella.github.io/2020/parallel-exit/</guid>
      <description>Golang并发模型：合理退出并发协程 goroutine作为Golang并发的核心，我们不仅要关注它们的创建和管理，当然还要关注如何合理的退</description>
    </item>
    
    <item>
      <title>Go并发：Goroutine与Channel实现并发</title>
      <link>https://mylovelyella.github.io/2020/goroutine-channel/</link>
      <pubDate>Wed, 16 Dec 2020 11:09:04 +0800</pubDate>
      
      <guid>https://mylovelyella.github.io/2020/goroutine-channel/</guid>
      <description>[toc] Go语言圣经 ​ 1. Goroutines 在Go语言中，每一个并发的执行单元叫作一个goroutine。设想这里的一个程序有两个函数，一个函数做计算，另一个输出结</description>
    </item>
    
    <item>
      <title>Go标准库：Flag库</title>
      <link>https://mylovelyella.github.io/2020/flag/</link>
      <pubDate>Wed, 16 Dec 2020 10:33:06 +0800</pubDate>
      
      <guid>https://mylovelyella.github.io/2020/flag/</guid>
      <description>Go语言内置了非常多具有常用功能的内置包，它们被称为标准库。我会在博客中以每篇文章一个标准库的方式记录我对标准库的理解和学习笔记。 今天是第一</description>
    </item>
    
  </channel>
</rss>
